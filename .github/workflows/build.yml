name: Checks
on:
  push:
    branches:
      - main
      - branch-*
    paths-ignore:
      - 'CONTRIBUTORS'
      - 'NEWS'
      - 'README.md'
  pull_request:
    branches:
      - main
      - branch-*
    types:
      - opened
      - synchronize
      - reopened
    paths-ignore:
      - 'CONTRIBUTORS'
      - 'NEWS'
      - 'README.md'

env:
  APT_PACKAGES: |
    libtool libtool-bin automake autoconf libtalloc-dev libevent-dev libssl-dev libgcrypt-dev \
    libkrb5-dev libpam0g-dev libdb-dev libmysqlclient-dev libavahi-client-dev \
    libacl1-dev libcrack2-dev libdbus-1-dev libdbus-glib-1-dev libglib2.0-dev \
    systemtap-sdt-dev tracker tcpd libtracker-sparql-3.0-dev libkrb5-dev

jobs:
  build-ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --assume-yes --no-install-recommends ${{ env.APT_PACKAGES }}
      - name: Bootstrap
        run: ./bootstrap
      - name: Configure
        run: |
             ./configure \
             --with-tracker-pkgconfig-version=3.0 \
             --enable-pgp-uam \
             --enable-krbv-uam
      - name: Build
        run: make -j $(nproc) all
      - name: Run tests
        run: make check
      - name: Run distribution tests
        run: make distcheck

  build-macos:
    name: macOS
    runs-on: macos-13
    env:
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: brew install automake libressl mysql talloc krb5
      - name: Bootstrap
        run: ./bootstrap
      - name: Configure
        run: |
             ./configure \
             --with-ssl-dir=/usr/local/opt/libressl \
             --with-bdb=/usr/local/opt/berkeley-db \
             --enable-pgp-uam \
             --enable-krbv-uam
      - name: Build
        run: make -j $(nproc) all
      - name: Run tests
        run: make check

  build-omnios:
    name: "OmniOS"
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Build on VM"
        uses: vmactions/omnios-vm@v1
        with:
          release: r151048
          copyback: false
          prepare: |
            pkg install build-essential pkg-config libtool
            curl -O https://pkgsrc.smartos.org/packages/SmartOS/bootstrap/bootstrap-trunk-x86_64-20230910.tar.gz
            tar -zxpf bootstrap-trunk-x86_64-20230910.tar.gz -C /
            echo "export PATH="/opt/local/sbin:/opt/local/bin:$PATH"" >> .profile
            source .profile
            /opt/local/bin/pkgin -y install libgcrypt libevent db5 gnome-tracker talloc
          run: |
            ./bootstrap
            ./configure --with-init-style=solaris MAKE=gmake PKG_CONFIG_PATH=/opt/local/lib/pkgconfig --with-bdb=/opt/local --with-libgcrypt-dir=/opt/local --with-tracker-pkgconfig-version=3.0
            gmake -j2

  build-freebsd:
    name: "FreeBSD"
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Build on VM"
        uses: vmactions/freebsd-vm@v1
        with:
          release: 13.2
          copyback: false
          prepare: |
            pkg install -y autoconf automake libtool pkgconf libgcrypt libevent libressl tracker3 talloc db5
          run: |
            ./bootstrap
            ./configure --with-ssl-dir=/usr/local --with-tracker-pkgconfig-version=3.0
            make -j2
          
  build-openbsd:
    name: "OpenBSD"
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Build on VM"
        uses: vmactions/openbsd-vm@v1
        with:
          release: 7.4
          copyback: false
          prepare: |
            pkg_add -I gcc-11.2.0p9 autoconf-2.71 automake-1.16.5 libtool pkgconf libgcrypt libevent dbus-glib tracker3 libtalloc avahi wget
            wget https://download.oracle.com/berkeley-db/db-5.3.28.tar.gz
            tar -xvzf db-5.3.28.tar.gz
            cd db-5.3.28/build_unix
            ../dist/configure
            make -j2
            make install          
          run: |
            export AUTOCONF_VERSION=2.71
            export AUTOMAKE_VERSION=1.16
            autoreconf -fi
            ./configure --with-tracker-pkgconfig-version=3.0 --with-bdb=/usr/local/BerkeleyDB.5.3 PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
            make -j2

  build-netbsd:
    name: "NetBSD"
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Build on VM"
        uses: vmactions/netbsd-vm@v1
        with:
          release: 9.3
          copyback: false
          prepare: |
            pkg_add gcc13 autoconf automake libtool pkg-config db5 libgcrypt libevent libressl gmake gnome-tracker talloc dbus-glib
          run: |
            ./bootstrap
            ./configure MAKE=gmake PKG_CONFIG_PATH=/usr/pkg/lib/pkgconfig --with-bdb=/usr/pkg --with-libgcrypt-dir=/usr/pkg --with-tracker-pkgconfig-version=3.0
            gmake -j2
            
  build-dflybsd:
    name: "DragonflyBSD"
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Build on VM"
        uses: vmactions/dragonflybsd-vm@v1
        with:
          copyback: false
          prepare: |
            pkg install -y autoconf automake libtool pkgconf db5 libgcrypt libevent tracker3 talloc avahi
          run: |
            ./bootstrap
            ./configure --with-ssl-dir=/usr/local --with-tracker-pkgconfig-version=3.0 LDFLAGS=-L/usr/local/lib CFLAGS=-I/usr/local/include
            make -j2

  build-solaris:
    name: "Solaris"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Build on VM"
        uses: vmactions/solaris-vm@v1
        with:
          release: 11.4
          prepare: |
            pkg install autoconf automake libtool pkg-config gcc libevent libgcrypt
            wget https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.gz --no-check-certificate
            wget https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.gz --no-check-certificate
            tar xvf autoconf-2.71.tar.gz
            tar xvf automake-1.16.5.tar.gz
            cd autoconf-2.71
            ./configure --prefix=/usr
            make
            make install
            cd ../automake-1.16.5
            ./configure --prefix=/usr
            make
            make install
            cd ..            
          run: |
            ./bootstrap
            ./configure MAKE=gmake --without-afpstats
            gmake -j2
  
  static_analysis:
    name: Static Analysis
    runs-on: ubuntu-22.04
    env:
      # Directory where build-wrapper output will be placed
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
    if: ${{ !github.event.pull_request.head.repo.fork }} # Run only if not originating from a fork
    steps:
      - uses: actions/checkout@v3
        with:
          # Shallow clones should be disabled for a better relevancy of analysis
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --assume-yes --no-install-recommends ${{ env.APT_PACKAGES }}
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Run build-wrapper
        run: |
          mkdir -p ${{ env.BUILD_WRAPPER_OUT_DIR }}
          ./bootstrap
          ./configure
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make -j $(nproc) all
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

